{
  "Log to the console": {
    "prefix": "log",
    "body": ["console.log($1);"],
    "description": "Log to the console"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": ["throw new Error(\"$1\");"],
    "description": "Throw Exception"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "    $0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop using =>": {
    "prefix": "foreach =>",
    "body": ["${1:array}.forEach(${2:element} => {", "    $0", "});"],
    "description": "For-Each Loop using =>"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:element} of ${2:object}) {", "    $0", "}"],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}($2) {", "    $0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "    $0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "    $2", "} else {", "    $0", "}"],
    "description": "If-Else Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "    case ${2:value}:",
      "        $0",
      "        break;",
      "",
      "    default:",
      "        break;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "    $0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "    $0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "    $0", "} catch (${1:error}) {", "    ", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "    $0", "}, ${1:1000});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "    $0", "}, ${1:1000});"],
    "description": "Set Interval Function"
  },
  "Promise that resolves after a timeout": {
    "description": "Promise that resolves after a timeout",
    "prefix": "sleep",
    "body": ["new Promise(resolve => setTimeout(resolve, ${1:1000}));$0"]
  },

  "React.useState": {
    "prefix": "useState",
    "description": "React.useState",
    "body": "const [${1:state}, ${2:setState}] = React.useState($3);$0"
  },
  "useEffect": {
    "prefix": ["useEffect"],
    "description": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${2}",
      "  return () => {${3}};",
      "}, [${1}]);"
    ]
  },
  "useLayoutEffect": {
    "prefix": ["useLayoutEffect"],
    "description": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  ${2}",
      "  return () => {${3}};",
      "}, [${1}]);"
    ]
  },
  "React.useMemo": {
    "description": "React.useMemo",
    "prefix": "useMemo",
    "body": "const ${1:memo} = React.useMemo(() => ${3}, [${2}]);"
  },
  "React.useCallback": {
    "description": "React.useCallback",
    "prefix": "useCallback",
    "body": [
      "const ${1:fn} = React.useCallback((${2}) => {",
      "  ${4}",
      "}, [${3}]);"
    ]
  },
  "React.useRef": {
    "description": "React.useRef",
    "prefix": ["useRef"],
    "body": ["const ${1:ref} = React.useRef<${2:type}>(${3:initialValue});"]
  },
  "React.useId": {
    "prefix": ["useId"],
    "description": "useId",
    "body": "const ${1:id} = React.useId();"
  },
  "React.useDeferredValue": {
    "description": "React.useDeferredValue",
    "prefix": "useDeferredValue",
    "body": "const ${1:deferred} = React.useDeferredValue(${2:value});"
  },
  "React.useTransition": {
    "description": "React.useTransition",
    "prefix": "useTransition",
    "body": "const [${1:isPending}, ${2:startTransition}] = React.useTransition();"
  }
}
