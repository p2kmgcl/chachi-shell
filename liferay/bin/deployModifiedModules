#!/usr/bin/env node

const {readdirSync, statSync} = require('fs')
const {basename, resolve, sep} = require('path')
const {execSync} = require('child_process')

const getGradlew = (path) => {
  if (statSync(path).isDirectory()) {
    const children = readdirSync(path)

    if (children.includes('gradlew')) {
      return `${path}${sep}gradlew`;
    }
  }

  const parent = path.split(sep).slice(0, -1).join(sep)

  if (parent && parent !== path) {
    return getGradlew(parent);
  }

  return null;
}

const getFileModule = (path) => {
  if (statSync(path).isDirectory()) {
    const children = readdirSync(path)

    if (children.includes('bnd.bnd')) {
      return path;
    }
  }

  const parent = path.split(sep).slice(0, -1).join(sep)

  if (parent && parent !== path) {
    return getFileModule(parent);
  }

  return null;
}

const modifiedModules = execSync('git diff --name-only master')
  .toString()
  .trim()
  .split('\n')
  .map(file => resolve(file))
  .map(file => getFileModule(file))
  .filter((module, index, modules) => module && index === modules.indexOf(module));

if (!modifiedModules.length) {
  console.error('No modified modules found');
  process.exit(1);
}

console.log(`${modifiedModules.length} module(s) found`);

for (const module of modifiedModules) {
  const gradlew = getGradlew(module);
  console.log(`[${basename(module)}] NODE_ENV=development ${gradlew} clean deploy -Dbuild=portal`);
  execSync(`${gradlew} clean deploy -Dbuild=portal`, { cwd: module, env: {...process.env, NODE_ENV: 'development'}, stdio: 'inherit' });
}
